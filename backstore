#!/bin/sh
################################################################################
#
# OCF resource agent to manage a Linux-IO backing LUN
# Copyright (c) 2014 Tiger Computing Ltd.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
################################################################################

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

TCM_SYSFS=/sys/kernel/config/target/core
HBA_MAX=255 # arbitrary high limit

################################################################################

# FIXME: Add ALUA and master/slave support

backstore_meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="backstore">
<version>1.0</version>

<longdesc lang="en">
The backstore resource manages a Linux-IO (LIO) backing LUN. This LUN can then
be exported to an initiator via a number of transports, including iSCSI, FCoE,
Fibre Channel, etc...

This resource can be run a a single primitive or as a multistate (master/slave)
resource. When used in multistate mode, the resource agent manages ALUA
attributes for multipathing.
</longdesc>

<shortdesc lang="en">
Linux-IO LUN
</shortdesc>

<parameters>

<parameter name="hba_type" unique="0" required="1">
<longdesc lang="en">
The backing store HBA type, for example 'iblock' or 'fileio'.
</longdesc>
<shortdesc lang="en">
Backing store type
</shortdesc>
<content type="string" />
</parameter>

<parameter name="name" unique="0" required="1">
<longdesc lang="en">
The name of the LUN. Will be used when exporting the LUN via a transport, and
may optionally be exposed to the initiator.
</longdesc>
<shortdesc lang="en">
LUN name
</shortdesc>
<content type="string" />
</parameter>

<parameter name="device" unique="1" required="1">
<longdesc lang="en">
The backing device or file for the LUN.
</longdesc>
<shortdesc lang="en">
Backing device or file
</shortdesc>
<content type="string" />
</parameter>

<parameter name="unit_serial" unique="1" required="1">
<longdesc lang="en">
The T10 serial number to use for the LUN. Should be a UUID. This is exposed to
the initiator as the vendor-specific unit serial number, and is used to generate
the NAA WWN.
</longdesc>
<shortdesc lang="en">
The unit serial number.
</shortdesc>
<content type="string" />
</parameter>

<parameter name="attrib" unique="0" required="0">
<longdesc lang="en">
Backing store attributes to set, in key=value form. Attributes not listed here
will use default values set in the kernel.
</longdesc>
<shortdesc lang="en">
Backing store attributes
</shortdesc>
<content type="string" />
</parameter>

</parameters>

<actions>
<action name="start"        timeout="40" />
<action name="promote"      timeout="90" />
<action name="demote"       timeout="90" />
<action name="notify"       timeout="90" />
<action name="stop"         timeout="120" />
<action name="monitor"      depth="0" timeout="20" interval="20" role="Slave" />
<action name="monitor"      depth="0" timeout="20" interval="10" role="Master" />
<action name="meta-data"    timeout="5" />
<action name="validate-all" timeout="30" />
</actions>
</resource-agent>
END

return $OCF_SUCCESS
}

backstore_methods() {
	cat <<-!
	start
	promote
	demote
	notify
	stop
	status
	monitor
	validate-all
	meta-data
	usage
	!
}

backstore_usage() {
	cat <<END
		usage: $0 {start|stop|monitor|status|validate-all|promote|demote|notify|meta-data}
END
}

#OCF_RESKEY_hba_type
#OCF_RESKEY_name
#OCF_RESKEY_unit_serial
#OCF_RESKEY_attrib
#
#hba_index=auto-detected
# load module(s) if not loaded

find_hbadev()
{
	local hba_list
	local hba
	local hbadev

	# list all HBAs of the configured type
	hba_list=$(ls -1 $TCM_SYSFS | egrep "^${OCF_RESKEY_hba_type}_[0-9]+$")

	for hba in $hba_list; do
		hbadev="${hba}/${OCF_RESKEY_name}"
		if [ -d "${TCM_SYSFS}/${hbadev}" ]; then
			echo "$hbadev"
			return 0
		fi
	done

	return 1
}

set_alua()
{
	local hbadev="$1"
	local ptgp="$2"
	local prop="$3"
	local value="$4"

	echo "$value" > "${TCM_SYSFS}/${hbadev}/alua/${ptgp}/${prop}"
}

backstore_monitor()
{
	local hbadev

	# If target_core_mod isn't loaded, we can't be running
	[ -e /sys/kernel/config/target/version ] || return $OCF_NOT_RUNNING

	# Try to find an HBA containing this device
	hbadev=$(find_hbadev)
	if [ -z "$hbadev" ]; then
		return $OCF_NOT_RUNNING
	fi

	# From this point the LUN is "running", though perhaps not fully
	# configured. We shouldn't return OCF_NOT_RUNNING but an error instead.

	# Check whether the device is enabled
	if [ "$(cat "${TCM_SYSFS}/${hbadev}/enable")" -ne 1 ]; then
		return $OCF_ERR_GENERIC
	fi

	return $OCF_SUCCESS
}

backstore_status()
{
	# just call through to monitor
	backstore_monitor
}

backstore_start()
{
	local rc
	local hba_idx
	local hba
	local hbadev
	local alua_ptgp
	local attr

	# Check if we have anything to do
	backstore_monitor; rc=$?
	if [ $rc -eq $OCF_SUCCESS ]; then
		ocf_log info "Resource is already running"
		return $OCF_SUCCESS
	fi

	# Load target_core_mod if it isn't already
	if ! [ -e /sys/kernel/config/target/version ]; then
		ocf_run modprobe target_core_mod; rc=$?
		if [ $rc -ne 0 ]; then
			return $OCF_ERR_GENERIC
		fi
	fi

	# Find a free HBA number
	for idx in $(seq 0 $HBA_MAX); do
		hba="${OCF_RESKEY_hba_type}_${idx}"
		[ ! -d "${TCM_SYSFS}/${hba}" ] && break
		hba=""
	done

	if [ -z "${hba}" ]; then
		ocf_log err "Could not allocate a new HBA: no free indexes"
		return $OCF_ERR_GENERIC
	fi

	hbadev="${hba}/${OCF_RESKEY_name}"
	ocf_log debug "Using hbadev=${hbadev}"

	# Create the HBA and LUN inside it
	ocf_run tcm_node --establishdev "$hbadev" "$OCF_RESKEY_device"; rc=$?
	[ $rc -eq 0 ] || return $OCF_ERR_GENERIC

	# Set the unit serial number
	ocf_run tcm_node --setunitserialwithmd "$hbadev" "$OCF_RESKEY_unit_serial"; rc=$?
	[ $rc -eq 0 ] || return $OCF_ERR_GENERIC

	# FIXME: Establish ALUA properly
	alua_ptgp=default_tg_pt_gp
	ocf_run tcm_node --addaluatpgwithmd "$hbadev" "$alua_ptgp" 0; rc=$?
	[ $rc -eq 0 ] || return $OCF_ERR_GENERIC

	set_alua "$hbadev" "$alua_ptgp" alua_access_type 0 || return $OCF_ERR_GENERIC
	set_alua "$hbadev" "$alua_ptgp" preferred 0 || return $OCF_ERR_GENERIC
	set_alua "$hbadev" "$alua_ptgp" nonop_delay_msecs 100 || return $OCF_ERR_GENERIC
	set_alua "$hbadev" "$alua_ptgp" trans_delay_msecs 0 || return $OCF_ERR_GENERIC

	# Set attributes
	for attrib in ${OCF_RESKEY_attrib}; do
		local var=${attrib%%=*}
		local val=${attrib#*=}
		echo "$val" > "${TCM_SYSFS}/${hbadev}/attrib/${var}"; rc=$?
		[ $rc -eq 0 ] || return $OCF_ERR_GENERIC
	done

	return $OCF_SUCCESS
}

backstore_stop()
{
	local hbadev
	local hba
	local rc

	# If target_core_mod isn't loaded, we can't be running
	[ -e /sys/kernel/config/target/version ] || return $OCF_SUCCESS

	# Try to find an HBA containing this device
	hbadev=$(find_hbadev)
	if [ -z "$hbadev" ]; then
		ocf_log info "Resource is already stopped"
		return $OCF_SUCCESS
	fi

	# Extract the HBA name from the hba/dev combo
	hba=${hbadev%/*}

	# Delete the HBA
	# Using --delhba removes the entire HBA and any LUN(s) inside, but
	# leaves state data in /var/target intact. Using --freedev removes an
	# individual LUN and all its state information, but leaves the HBA
	# device in place.
	ocf_run tcm_node --delhba $hba; rc=$?
	if [ $rc -ne 0 ]; then
		return $OCF_ERR_GENERIC
	fi

	# FIXME: if we are the last to go, clean up and unload modules?

	return $OCF_SUCCESS
}

backstore_promote()
{
	return $OCF_ERR_UNIMPLEMENTED
}

backstore_demote()
{
	return $OCF_ERR_UNIMPLEMENTED
}

backstore_notify()
{
	return $OCF_ERR_UNIMPLEMENTED
}

backstore_validate_all()
{
	local rc

	if ocf_is_clone; then
		if ! ocf_is_ms; then
			ocf_log err "may only be a primitive or master/slave RA"
			return $OCF_ERR_CONFIGURED
		fi

		if [ "$OCF_RESKEY_CRM_meta_clone_max" -ne 2 ] ||
		   [ "$OCF_RESKEY_CRM_meta_clone_node_max" -ne 1 ] ||
		   [ "$OCF_RESKEY_CRM_meta_master_node_max" -ne 1 ] ||
		   [ "$OCF_RESKEY_CRM_meta_master_max" -ne 1 ]; then
			ocf_log err "Clone options misconfigured. (expect: clone_max=2,clone_node_max=1,master_node_max=1,master_max=1)"
			return $OCF_ERR_CONFIGURED
		fi
	fi

	# ensure ALUA and PR state directories exist
	for DIR in /var/target/alua /var/target/pr; do
		[ -d "$DIR" ] || ocf_run mkdir -p "$DIR"; rc=$?
		if [ $rc -ne 0 ]; then
			ocf_log err "Could not create $DIR"
			return $OCF_ERR_INSTALLED
		fi
	done

	# ensure configfs is mounted
	if [ ! -d /sys/kernel/config ]; then
		ocf_run modprobe configfs; rc=$?
		if [ $rc -ne 0 ]; then
			ocf_log err "Unable to load the configfs module"
			return $OCF_ERR_INSTALLED
		fi
	fi
	if ! grep -q '/sys/kernel/config configfs' /proc/mounts; then
		ocf_run mount -t configfs configfs /sys/kernel/config; rc=$?
		if [ $rc -ne 0 ]; then
			ocf_log err "Unable to mount configfs on /sys/kernel/config"
			return $OCF_ERR_INSTALLED
		fi
	fi

	# ensure the hba_type is one we know about
	case "${OCF_RESKEY_hba_type}" in
	iblock)
		if [ ! -b "$OCF_RESKEY_device" ]; then
			ocf_log err "${OCF_RESKEY_device}: is not a block device"
			return $OCF_ERR_CONFIGURED
		fi
		;;
	fileio)
		if [ ! -e "$OCF_RESKEY_device" ]; then
			ocf_log err "${OCF_RESKEY_device}: does not exist"
			return $OCF_ERR_CONFIGURED
		fi
		;;
	*)
		ocf_log err "Unknown hba_type: ${OCF_RESKEY_hba_type}"
		return $OCF_ERR_CONFIGURED
		;;
	esac

	# FIXME
	if ocf_is_ms; then
		ocf_log err "master/slave not yet implemented"
		return $OCF_ERR_UNIMPLEMENTED
	fi

	return $OCF_SUCCESS
}

OCF_REQUIRED_PARAMS="hba_type name device unit_serial"
OCF_REQUIRED_BINARIES="tcm_node"
ocf_rarun $*

